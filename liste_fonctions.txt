Fichiers et leurs fonctions :


date.h :
	- void AfficherDate(struct tm date);
	  Affiche une date au format jj/mm/aaaa
	  
	- void SaisirDate(struct tm *ptr_date);
	  Saisie une date au format jj.mm.aaaa
	  
	- void RecupererDate(struct tm *ptr_dateDuJour);
	  Récupère la date du jour.
	
	- int ControleDate(struct tm d);
	  Permet de savoir si une date est valide ou non.
	
	- void CalculRentreeScolaire(struct tm today, struct tm *rentreeScolaire);
	  Permet de calculer la date de rentré scolaire.
	 
	- int CalculerAge(struct tm dateJ, struct tm dateN);
	  Retourne l'age en fonction de la date du jour de la date de naissance;
	
	- int CategorieAge(struct tm dateN, struct tm dateR);
	  Retourne le catégorie d'age en fonction de la date de naissance et la date de rentré.
	

eleve.h :
	- Eleve_t* CreationEleve(void);
	  Créé une structure Eleve_t en mémoire (malloc/calloc).
	  
	- void AfficherEleve(Eleve_t eleve);
	  Affiche un élève.
	  
	- void SaisirEleve(Eleve_t *ptr_eleve, char *nom, char* prenom);
	  Saisie les champs d'un élève.
	  
	- void SupprimerEleve(Eleve_t *ptr_eleve);
	  Libère la structure Eleve_t de la mémoire (free).
	
	- Eleve_t* DernierEleve(Eleve_t *courant)
	  Permet de ce positionner sur le dernier élève.
	 
	- Eleve_t* ElevePosition(Eleve_t *ptr_eleveCourant, int position);
	  Renvoie un pointeur sur l'élève situé a la position passé en paramètre. Renvoie NULL sinon.
	  

prof.h :
	- Prof_t* CreationProf(void);
	  Créé une structure Prof_t en mémoire (malloc/calloc).
	
	- void AfficherProf(Prof_t prof);
	  Affiche un prof.
	  
	- void SaisirProf(Prof_t *ptr_prof);
	  Saisie un prof.
	
	- void SupprimerProf(Prof_t *ptr_prof);
	  Supprime un prof de la mémoire (free).

	  
classe.h :
	- void AfficherClasse(Classe_t *ptr_classe);
	  Affiche les élèves de la classe.
	  
	- Eleve_t* RechercherEleveDansClasse(Classe_t *ptr_classe, char *nom, char *prenom);
	  Recherche un élève dans  la classe et retourne un pointeur sur celui-ci si il existe.
	  
	- void AjouterEleveDansClasse(Classe_t *ptr_classe, Eleve_t *ptr_eleve);
	  Ajoute un élève dans la classe, si posible.
	
	- void RetirerEleveDansClasse(Classe_t *ptr_classe, Eleve_t *ptr_eleve);
	  Retire un eleve de la classe sans le supprimer.
	  
	- void SupprimerEleveDansClasse(Classe_t *ptr_classe, Eleve_t *ptr_eleve);
	  Supprime un élève de la classe, si il existe.
	
	- Classe_t* RechercherClasseEleve(Classe_t* ptr_classeCourante, Eleve_t * ptr_eleve);
	  Permet de recupérer un pointeur sur la classe de l'élève.
	
	- Classe_t* RechercherNiveauClasse(Classe_t *ptr_classeCourante, Eleve_t *ptr_eleve);
	  Recherche une classe du niveau correspondant à l'élève.
	
	- void RepartitionEleveDansClasse(Classe_t *ptr_classe)
	  Reparti de manière équitable les élèves dans les deux classes de même niveau.

	  
personnel.h :
	- void AfficherPersonnel(Personnel_t personnel);
	  Affiche les détails du personnel.
	  
	- void SaisirPersonnel(Personnel_t *ptr_personnel);
	  Saisie les informations du personnel.

	- void SupprimerPersonnel(Personnel_t *ptr_personnel);
	  Supprime le personnel choisi.
	  
ecole.h :
	- void AjouterEleveDansEcole(Ecole_t *ptr_ecole, char *nom, char *prenom);
	  Ajoute un élève dans l'école si c'est possible.
	  
	- void SupprimerEleveDansEcole(Ecole_t *ptr_ecole, char *nom, char *prenom);
	  Supprime un élève de l'école si il existe.
	  
	- Eleve* RechercherEleveDansEcole(Ecole_t *ptr_ecole, char *nom, char *prenom);
	  Recherche un élève dans l'école et retourne un pointeur sur celui-ci si il existe.
	
	- void ModificationEleve(Ecole_t *ptr_ecole, char *nom, char* prenom);
	  Modifie les informations d'un élève et propose de le replacer.


fichier.h :
	- int comptedonnees(FILE * fichier);
	  Compte le nombre de lignes trouvées dans un fichier

	- void gestionErreurs(FILE * fichier);
	  Traite les erreurs d'ouvertures des fichiers
	  
	- void ecrireBaseEleve(char *nomFichier, Ecole_t ecole);
	  Inscrit dans un fichier de sauvegarde les infos sur les eleves et leurs classes
	  
	- void lireBaseEleve(char *nomFichier, Ecole_t *ptr_ecole);
	  Recupere les eleves et leurs classes depuis un fichier precedemment sauvegarder

	  
fonctionAnnexe.h :
	- void ViderBuffer(void);
	  Permet de vider le buffer.

	- void RetourLigne(int nb);
	  Permet de faire nb retour de ligne dans l'affichage console.

	- void NormaliserNomPrenom(char * civilite, char * nom, char * prenom);
	  Normalise les chaines en mettant une majuscule au début et le reste en miniscule.

	- int ControleChaine(char* ch);
	  Permet de savoir si la chaine contient des accents ou des chiffres.

	- void SaisieChaineControle(char *ptr_chaine, char *message);
	  Permet de saisir une chaine tant quelle n'a pas validé le contrôle de ControleChaine.